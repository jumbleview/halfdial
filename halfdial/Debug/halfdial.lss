
halfdial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000845  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000845  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000882  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bb0  00000000  00000000  000008ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b5  00000000  00000000  0000147a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000616  00000000  00000000  00001b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00002148  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000032f  00000000  00000000  0000240c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000273b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000762  00000762  00000836  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002774  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.activateTimer2 0000001a  0000072c  0000072c  00000800  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.AllDark 000000c2  0000066a  0000066a  0000073e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.SecsHoursLights 000001ba  000004b0  000004b0  00000584  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.MinutesPMlights 000001ce  000002e2  000002e2  000003b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_9 000001f2  000000f0  000000f0  000001c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    00000006  0000075c  0000075c  00000830  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss.hoursButton.1794 00000001  00800100  00800100  00000845  2**0
                  ALLOC
 21 .bss.hours.1790 00000001  00800101  00800101  00000845  2**0
                  ALLOC
 22 .bss.minutes.1791 00000001  00800102  00800102  00000845  2**0
                  ALLOC
 23 .bss.clockTick.1793 00000001  00800103  00800103  00000845  2**0
                  ALLOC
 24 .bss.secs.1792 00000001  00800104  00800104  00000845  2**0
                  ALLOC
 25 .bss.minutesButton.1795 00000001  00800105  00800105  00000845  2**0
                  ALLOC
 26 .bss.modeButton.1796 00000001  00800106  00800106  00000845  2**0
                  ALLOC
 27 .data.powerUp.1797 00000001  00800107  00000770  00000844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 28 .bss.clockMode.1798 00000001  00800108  00800108  00000845  2**0
                  ALLOC
 29 .progmemx.data.minutesMaskAfter30.1747 00000005  000000e6  000000e6  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 30 .progmemx.data.minutesMaskBefore30.1746 00000005  000000eb  000000eb  000001bf  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 31 .progmemx.data.fiveMinutesMask.1742 0000000c  000000ce  000000ce  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 32 .progmemx.data.hoursMask.1693 0000000c  000000da  000000da  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 33 .text.__dummy_fini 00000002  0000076a  0000076a  0000083e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__dummy_funcs_on_exit 00000002  0000076c  0000076c  00000840  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__dummy_simulator_exit 00000002  0000076e  0000076e  00000842  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.exit    00000016  00000746  00000746  0000081a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text._Exit   00000004  00000766  00000766  0000083a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
   8:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
   c:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
  10:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
  14:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
  18:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
  1c:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
  20:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
  24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_9>
  28:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
  2c:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
  30:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
  34:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
  38:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
  3c:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
  40:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
  44:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
  48:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
  4c:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
  50:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
  54:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
  58:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
  5c:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
  60:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>
  64:	0c 94 b1 03 	jmp	0x762	; 0x762 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 07       	cpc	r16, r17
  6c:	80 01       	movw	r16, r0
  6e:	07 01       	movw	r0, r14
  70:	08 00       	.word	0x0008	; ????
  72:	07 70       	andi	r16, 0x07	; 7
  74:	01 08       	sbc	r0, r1
  76:	01 09       	sbc	r16, r1
  78:	80 00       	.word	0x0080	; ????

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	e8 e6       	ldi	r30, 0x68	; 104
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	17 c0       	rjmp	.+46     	; 0xbc <__do_clear_bss+0x8>
  8e:	b5 91       	lpm	r27, Z+
  90:	a5 91       	lpm	r26, Z+
  92:	35 91       	lpm	r19, Z+
  94:	25 91       	lpm	r18, Z+
  96:	05 91       	lpm	r16, Z+
  98:	07 fd       	sbrc	r16, 7
  9a:	0c c0       	rjmp	.+24     	; 0xb4 <__do_clear_bss>
  9c:	95 91       	lpm	r25, Z+
  9e:	85 91       	lpm	r24, Z+
  a0:	ef 01       	movw	r28, r30
  a2:	f9 2f       	mov	r31, r25
  a4:	e8 2f       	mov	r30, r24
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0x20>
  b0:	fe 01       	movw	r30, r28
  b2:	04 c0       	rjmp	.+8      	; 0xbc <__do_clear_bss+0x8>

000000b4 <__do_clear_bss>:
  b4:	1d 92       	st	X+, r1
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__do_clear_bss>
  bc:	e9 37       	cpi	r30, 0x79	; 121
  be:	f4 07       	cpc	r31, r20
  c0:	31 f7       	brne	.-52     	; 0x8e <__do_copy_data+0x8>
  c2:	0e 94 ae 03 	call	0x75c	; 0x75c <main>
  c6:	0c 94 a3 03 	jmp	0x746	; 0x746 <exit>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>

Disassembly of section .text:

00000762 <__bad_interrupt>:
 762:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.activateTimer2:

0000072c <activateTimer2>:
}


void activateTimer2()
{
	cli();
 72c:	f8 94       	cli
	ASSR = 0x20;
 72e:	80 e2       	ldi	r24, 0x20	; 32
 730:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
	TCCR2A=0; // Normal operation
 734:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B=1; // external source, no prescaling, 128 interrupts per second for 32768 oscillator
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	//TCCR2B=2; // external source, 16 interrupts per second for 32768 oscillator
	//TCCR2B=3; // external source, 4 interrupts per second for 32768 oscillator
	TIMSK2 = 1;
 73e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	sei();
 742:	78 94       	sei
 744:	08 95       	ret

Disassembly of section .text.AllDark:

0000066a <AllDark>:
}

void AllDark() {
	// B port
	pinInNoPullup(B,1);
 66a:	84 b1       	in	r24, 0x04	; 4
 66c:	8d 7f       	andi	r24, 0xFD	; 253
 66e:	84 b9       	out	0x04, r24	; 4
 670:	85 b1       	in	r24, 0x05	; 5
 672:	8d 7f       	andi	r24, 0xFD	; 253
 674:	85 b9       	out	0x05, r24	; 5
	pinInNoPullup(B,2);
 676:	84 b1       	in	r24, 0x04	; 4
 678:	8b 7f       	andi	r24, 0xFB	; 251
 67a:	84 b9       	out	0x04, r24	; 4
 67c:	85 b1       	in	r24, 0x05	; 5
 67e:	8b 7f       	andi	r24, 0xFB	; 251
 680:	85 b9       	out	0x05, r24	; 5
	pinInNoPullup(B,3);
 682:	84 b1       	in	r24, 0x04	; 4
 684:	87 7f       	andi	r24, 0xF7	; 247
 686:	84 b9       	out	0x04, r24	; 4
 688:	85 b1       	in	r24, 0x05	; 5
 68a:	87 7f       	andi	r24, 0xF7	; 247
 68c:	85 b9       	out	0x05, r24	; 5
	pinInNoPullup(B,4);
 68e:	84 b1       	in	r24, 0x04	; 4
 690:	8f 7e       	andi	r24, 0xEF	; 239
 692:	84 b9       	out	0x04, r24	; 4
 694:	85 b1       	in	r24, 0x05	; 5
 696:	8f 7e       	andi	r24, 0xEF	; 239
 698:	85 b9       	out	0x05, r24	; 5
	pinInNoPullup(B,5);
 69a:	84 b1       	in	r24, 0x04	; 4
 69c:	8f 7d       	andi	r24, 0xDF	; 223
 69e:	84 b9       	out	0x04, r24	; 4
 6a0:	85 b1       	in	r24, 0x05	; 5
 6a2:	8f 7d       	andi	r24, 0xDF	; 223
 6a4:	85 b9       	out	0x05, r24	; 5
	// C port
	pinInNoPullup(C,0);
 6a6:	87 b1       	in	r24, 0x07	; 7
 6a8:	8e 7f       	andi	r24, 0xFE	; 254
 6aa:	87 b9       	out	0x07, r24	; 7
 6ac:	88 b1       	in	r24, 0x08	; 8
 6ae:	8e 7f       	andi	r24, 0xFE	; 254
 6b0:	88 b9       	out	0x08, r24	; 8
	pinInNoPullup(C,1);
 6b2:	87 b1       	in	r24, 0x07	; 7
 6b4:	8d 7f       	andi	r24, 0xFD	; 253
 6b6:	87 b9       	out	0x07, r24	; 7
 6b8:	88 b1       	in	r24, 0x08	; 8
 6ba:	8d 7f       	andi	r24, 0xFD	; 253
 6bc:	88 b9       	out	0x08, r24	; 8
	pinInNoPullup(C,2);
 6be:	87 b1       	in	r24, 0x07	; 7
 6c0:	8b 7f       	andi	r24, 0xFB	; 251
 6c2:	87 b9       	out	0x07, r24	; 7
 6c4:	88 b1       	in	r24, 0x08	; 8
 6c6:	8b 7f       	andi	r24, 0xFB	; 251
 6c8:	88 b9       	out	0x08, r24	; 8
	pinInNoPullup(C,3);
 6ca:	87 b1       	in	r24, 0x07	; 7
 6cc:	87 7f       	andi	r24, 0xF7	; 247
 6ce:	87 b9       	out	0x07, r24	; 7
 6d0:	88 b1       	in	r24, 0x08	; 8
 6d2:	87 7f       	andi	r24, 0xF7	; 247
 6d4:	88 b9       	out	0x08, r24	; 8
	pinInNoPullup(C,4);
 6d6:	87 b1       	in	r24, 0x07	; 7
 6d8:	8f 7e       	andi	r24, 0xEF	; 239
 6da:	87 b9       	out	0x07, r24	; 7
 6dc:	88 b1       	in	r24, 0x08	; 8
 6de:	8f 7e       	andi	r24, 0xEF	; 239
 6e0:	88 b9       	out	0x08, r24	; 8
	pinInNoPullup(C,5);
 6e2:	87 b1       	in	r24, 0x07	; 7
 6e4:	8f 7d       	andi	r24, 0xDF	; 223
 6e6:	87 b9       	out	0x07, r24	; 7
 6e8:	88 b1       	in	r24, 0x08	; 8
 6ea:	8f 7d       	andi	r24, 0xDF	; 223
 6ec:	88 b9       	out	0x08, r24	; 8
	// D port
	pinInNoPullup(D,0);
 6ee:	8a b1       	in	r24, 0x0a	; 10
 6f0:	8e 7f       	andi	r24, 0xFE	; 254
 6f2:	8a b9       	out	0x0a, r24	; 10
 6f4:	8b b1       	in	r24, 0x0b	; 11
 6f6:	8e 7f       	andi	r24, 0xFE	; 254
 6f8:	8b b9       	out	0x0b, r24	; 11
	pinInNoPullup(D,1);
 6fa:	8a b1       	in	r24, 0x0a	; 10
 6fc:	8d 7f       	andi	r24, 0xFD	; 253
 6fe:	8a b9       	out	0x0a, r24	; 10
 700:	8b b1       	in	r24, 0x0b	; 11
 702:	8d 7f       	andi	r24, 0xFD	; 253
 704:	8b b9       	out	0x0b, r24	; 11
	pinInNoPullup(D,2);
 706:	8a b1       	in	r24, 0x0a	; 10
 708:	8b 7f       	andi	r24, 0xFB	; 251
 70a:	8a b9       	out	0x0a, r24	; 10
 70c:	8b b1       	in	r24, 0x0b	; 11
 70e:	8b 7f       	andi	r24, 0xFB	; 251
 710:	8b b9       	out	0x0b, r24	; 11
	pinInNoPullup(D,3);
 712:	8a b1       	in	r24, 0x0a	; 10
 714:	87 7f       	andi	r24, 0xF7	; 247
 716:	8a b9       	out	0x0a, r24	; 10
 718:	8b b1       	in	r24, 0x0b	; 11
 71a:	87 7f       	andi	r24, 0xF7	; 247
 71c:	8b b9       	out	0x0b, r24	; 11
	pinInNoPullup(D,4);		
 71e:	8a b1       	in	r24, 0x0a	; 10
 720:	8f 7e       	andi	r24, 0xEF	; 239
 722:	8a b9       	out	0x0a, r24	; 10
 724:	8b b1       	in	r24, 0x0b	; 11
 726:	8f 7e       	andi	r24, 0xEF	; 239
 728:	8b b9       	out	0x0b, r24	; 11
 72a:	08 95       	ret

Disassembly of section .text.SecsHoursLights:

000004b0 <SecsHoursLights>:
}

void SecsHoursLights( uint8_t secs, uint8_t hours) {
	// Seconds three-color LED control
	if (secs == 0) {
 4b0:	81 11       	cpse	r24, r1
 4b2:	13 c0       	rjmp	.+38     	; 0x4da <SecsHoursLights+0x2a>
		pinOut(D,2, OUT_HIGH);
 4b4:	8a b1       	in	r24, 0x0a	; 10
 4b6:	84 60       	ori	r24, 0x04	; 4
 4b8:	8a b9       	out	0x0a, r24	; 10
 4ba:	8b b1       	in	r24, 0x0b	; 11
 4bc:	84 60       	ori	r24, 0x04	; 4
 4be:	8b b9       	out	0x0b, r24	; 11
		pinOut(D,3, OUT_HIGH);
 4c0:	8a b1       	in	r24, 0x0a	; 10
 4c2:	88 60       	ori	r24, 0x08	; 8
 4c4:	8a b9       	out	0x0a, r24	; 10
 4c6:	8b b1       	in	r24, 0x0b	; 11
 4c8:	88 60       	ori	r24, 0x08	; 8
 4ca:	8b b9       	out	0x0b, r24	; 11
		pinOut(D,4, OUT_HIGH);
 4cc:	8a b1       	in	r24, 0x0a	; 10
 4ce:	80 61       	ori	r24, 0x10	; 16
 4d0:	8a b9       	out	0x0a, r24	; 10
 4d2:	8b b1       	in	r24, 0x0b	; 11
 4d4:	80 61       	ori	r24, 0x10	; 16
 4d6:	8b b9       	out	0x0b, r24	; 11
 4d8:	51 c0       	rjmp	.+162    	; 0x57c <SecsHoursLights+0xcc>
	} else if ( secs <= 15 ) { // Red
 4da:	80 31       	cpi	r24, 0x10	; 16
 4dc:	98 f4       	brcc	.+38     	; 0x504 <SecsHoursLights+0x54>
		pinOut(D,2, OUT_LOW);
 4de:	8a b1       	in	r24, 0x0a	; 10
 4e0:	84 60       	ori	r24, 0x04	; 4
 4e2:	8a b9       	out	0x0a, r24	; 10
 4e4:	8b b1       	in	r24, 0x0b	; 11
 4e6:	8b 7f       	andi	r24, 0xFB	; 251
 4e8:	8b b9       	out	0x0b, r24	; 11
		pinOut(D,3, OUT_HIGH);
 4ea:	8a b1       	in	r24, 0x0a	; 10
 4ec:	88 60       	ori	r24, 0x08	; 8
 4ee:	8a b9       	out	0x0a, r24	; 10
 4f0:	8b b1       	in	r24, 0x0b	; 11
 4f2:	88 60       	ori	r24, 0x08	; 8
 4f4:	8b b9       	out	0x0b, r24	; 11
		pinOut(D,4, OUT_HIGH);
 4f6:	8a b1       	in	r24, 0x0a	; 10
 4f8:	80 61       	ori	r24, 0x10	; 16
 4fa:	8a b9       	out	0x0a, r24	; 10
 4fc:	8b b1       	in	r24, 0x0b	; 11
 4fe:	80 61       	ori	r24, 0x10	; 16
 500:	8b b9       	out	0x0b, r24	; 11
 502:	3c c0       	rjmp	.+120    	; 0x57c <SecsHoursLights+0xcc>
	} else if ( secs <= 30 ) { // Green
 504:	8f 31       	cpi	r24, 0x1F	; 31
 506:	98 f4       	brcc	.+38     	; 0x52e <SecsHoursLights+0x7e>
		pinOut(D,2, OUT_HIGH);		
 508:	8a b1       	in	r24, 0x0a	; 10
 50a:	84 60       	ori	r24, 0x04	; 4
 50c:	8a b9       	out	0x0a, r24	; 10
 50e:	8b b1       	in	r24, 0x0b	; 11
 510:	84 60       	ori	r24, 0x04	; 4
 512:	8b b9       	out	0x0b, r24	; 11
		pinOut(D,3, OUT_LOW);
 514:	8a b1       	in	r24, 0x0a	; 10
 516:	88 60       	ori	r24, 0x08	; 8
 518:	8a b9       	out	0x0a, r24	; 10
 51a:	8b b1       	in	r24, 0x0b	; 11
 51c:	87 7f       	andi	r24, 0xF7	; 247
 51e:	8b b9       	out	0x0b, r24	; 11
		pinOut(D,4, OUT_HIGH);		
 520:	8a b1       	in	r24, 0x0a	; 10
 522:	80 61       	ori	r24, 0x10	; 16
 524:	8a b9       	out	0x0a, r24	; 10
 526:	8b b1       	in	r24, 0x0b	; 11
 528:	80 61       	ori	r24, 0x10	; 16
 52a:	8b b9       	out	0x0b, r24	; 11
 52c:	27 c0       	rjmp	.+78     	; 0x57c <SecsHoursLights+0xcc>
	} else if ( secs <= 45 ) { // Blue
 52e:	8e 32       	cpi	r24, 0x2E	; 46
 530:	98 f4       	brcc	.+38     	; 0x558 <SecsHoursLights+0xa8>
		pinOut(D,2, OUT_HIGH);		
 532:	8a b1       	in	r24, 0x0a	; 10
 534:	84 60       	ori	r24, 0x04	; 4
 536:	8a b9       	out	0x0a, r24	; 10
 538:	8b b1       	in	r24, 0x0b	; 11
 53a:	84 60       	ori	r24, 0x04	; 4
 53c:	8b b9       	out	0x0b, r24	; 11
		pinOut(D,3, OUT_HIGH);		
 53e:	8a b1       	in	r24, 0x0a	; 10
 540:	88 60       	ori	r24, 0x08	; 8
 542:	8a b9       	out	0x0a, r24	; 10
 544:	8b b1       	in	r24, 0x0b	; 11
 546:	88 60       	ori	r24, 0x08	; 8
 548:	8b b9       	out	0x0b, r24	; 11
		pinOut(D,4, OUT_LOW);
 54a:	8a b1       	in	r24, 0x0a	; 10
 54c:	80 61       	ori	r24, 0x10	; 16
 54e:	8a b9       	out	0x0a, r24	; 10
 550:	8b b1       	in	r24, 0x0b	; 11
 552:	8f 7e       	andi	r24, 0xEF	; 239
 554:	8b b9       	out	0x0b, r24	; 11
 556:	12 c0       	rjmp	.+36     	; 0x57c <SecsHoursLights+0xcc>
	} else { // White
		pinOut(D,2, OUT_LOW);
 558:	8a b1       	in	r24, 0x0a	; 10
 55a:	84 60       	ori	r24, 0x04	; 4
 55c:	8a b9       	out	0x0a, r24	; 10
 55e:	8b b1       	in	r24, 0x0b	; 11
 560:	8b 7f       	andi	r24, 0xFB	; 251
 562:	8b b9       	out	0x0b, r24	; 11
		pinOut(D,3, OUT_LOW);
 564:	8a b1       	in	r24, 0x0a	; 10
 566:	88 60       	ori	r24, 0x08	; 8
 568:	8a b9       	out	0x0a, r24	; 10
 56a:	8b b1       	in	r24, 0x0b	; 11
 56c:	87 7f       	andi	r24, 0xF7	; 247
 56e:	8b b9       	out	0x0b, r24	; 11
		pinOut(D,4, OUT_LOW);
 570:	8a b1       	in	r24, 0x0a	; 10
 572:	80 61       	ori	r24, 0x10	; 16
 574:	8a b9       	out	0x0a, r24	; 10
 576:	8b b1       	in	r24, 0x0b	; 11
 578:	8f 7e       	andi	r24, 0xEF	; 239
 57a:	8b b9       	out	0x0b, r24	; 11
	}
	
	// Hours LEDs control
	static const uint8_t hoursMask [12] = {0x01,0x03,0x07,0x0F,0x1F,0x3F, 0x40,0x60,0x70,0x78,0x7C,0x7E};
		if (hours >= 12 ) {
 57c:	6c 30       	cpi	r22, 0x0C	; 12
 57e:	08 f0       	brcs	.+2      	; 0x582 <SecsHoursLights+0xd2>
			hours = hours - 12;
 580:	6c 50       	subi	r22, 0x0C	; 12
		}
	uint8_t count = 	hoursMask[hours];
 582:	86 2f       	mov	r24, r22
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	a0 e0       	ldi	r26, 0x00	; 0
 588:	86 52       	subi	r24, 0x26	; 38
 58a:	9f 4f       	sbci	r25, 0xFF	; 255
 58c:	af 4f       	sbci	r26, 0xFF	; 255
 58e:	fc 01       	movw	r30, r24
 590:	84 91       	lpm	r24, Z
 592:	a7 fd       	sbrc	r26, 7
 594:	80 81       	ld	r24, Z
	if (count & 0x01) {
 596:	80 ff       	sbrs	r24, 0
 598:	07 c0       	rjmp	.+14     	; 0x5a8 <SecsHoursLights+0xf8>
		pinOut(B,5, OUT_LOW);
 59a:	94 b1       	in	r25, 0x04	; 4
 59c:	90 62       	ori	r25, 0x20	; 32
 59e:	94 b9       	out	0x04, r25	; 4
 5a0:	95 b1       	in	r25, 0x05	; 5
 5a2:	9f 7d       	andi	r25, 0xDF	; 223
 5a4:	95 b9       	out	0x05, r25	; 5
 5a6:	06 c0       	rjmp	.+12     	; 0x5b4 <SecsHoursLights+0x104>
	} else {
		pinOut(B,5, OUT_HIGH);
 5a8:	94 b1       	in	r25, 0x04	; 4
 5aa:	90 62       	ori	r25, 0x20	; 32
 5ac:	94 b9       	out	0x04, r25	; 4
 5ae:	95 b1       	in	r25, 0x05	; 5
 5b0:	90 62       	ori	r25, 0x20	; 32
 5b2:	95 b9       	out	0x05, r25	; 5
	}
	if (count & 0x02) {
 5b4:	81 ff       	sbrs	r24, 1
 5b6:	07 c0       	rjmp	.+14     	; 0x5c6 <SecsHoursLights+0x116>
		pinOut(B,4, OUT_LOW);
 5b8:	94 b1       	in	r25, 0x04	; 4
 5ba:	90 61       	ori	r25, 0x10	; 16
 5bc:	94 b9       	out	0x04, r25	; 4
 5be:	95 b1       	in	r25, 0x05	; 5
 5c0:	9f 7e       	andi	r25, 0xEF	; 239
 5c2:	95 b9       	out	0x05, r25	; 5
 5c4:	06 c0       	rjmp	.+12     	; 0x5d2 <SecsHoursLights+0x122>
		} else {
		pinOut(B,4, OUT_HIGH);
 5c6:	94 b1       	in	r25, 0x04	; 4
 5c8:	90 61       	ori	r25, 0x10	; 16
 5ca:	94 b9       	out	0x04, r25	; 4
 5cc:	95 b1       	in	r25, 0x05	; 5
 5ce:	90 61       	ori	r25, 0x10	; 16
 5d0:	95 b9       	out	0x05, r25	; 5
	}
	if (count & 0x04) {
 5d2:	82 ff       	sbrs	r24, 2
 5d4:	07 c0       	rjmp	.+14     	; 0x5e4 <SecsHoursLights+0x134>
		pinOut(B,3, OUT_LOW);
 5d6:	94 b1       	in	r25, 0x04	; 4
 5d8:	98 60       	ori	r25, 0x08	; 8
 5da:	94 b9       	out	0x04, r25	; 4
 5dc:	95 b1       	in	r25, 0x05	; 5
 5de:	97 7f       	andi	r25, 0xF7	; 247
 5e0:	95 b9       	out	0x05, r25	; 5
 5e2:	06 c0       	rjmp	.+12     	; 0x5f0 <SecsHoursLights+0x140>
		} else {
		pinOut(B,3, OUT_HIGH);
 5e4:	94 b1       	in	r25, 0x04	; 4
 5e6:	98 60       	ori	r25, 0x08	; 8
 5e8:	94 b9       	out	0x04, r25	; 4
 5ea:	95 b1       	in	r25, 0x05	; 5
 5ec:	98 60       	ori	r25, 0x08	; 8
 5ee:	95 b9       	out	0x05, r25	; 5
	}
	if (count & 0x08) {
 5f0:	83 ff       	sbrs	r24, 3
 5f2:	07 c0       	rjmp	.+14     	; 0x602 <SecsHoursLights+0x152>
		pinOut(B,2, OUT_LOW);
 5f4:	94 b1       	in	r25, 0x04	; 4
 5f6:	94 60       	ori	r25, 0x04	; 4
 5f8:	94 b9       	out	0x04, r25	; 4
 5fa:	95 b1       	in	r25, 0x05	; 5
 5fc:	9b 7f       	andi	r25, 0xFB	; 251
 5fe:	95 b9       	out	0x05, r25	; 5
 600:	06 c0       	rjmp	.+12     	; 0x60e <SecsHoursLights+0x15e>
		} else {
		pinOut(B,2, OUT_HIGH);
 602:	94 b1       	in	r25, 0x04	; 4
 604:	94 60       	ori	r25, 0x04	; 4
 606:	94 b9       	out	0x04, r25	; 4
 608:	95 b1       	in	r25, 0x05	; 5
 60a:	94 60       	ori	r25, 0x04	; 4
 60c:	95 b9       	out	0x05, r25	; 5
	}
	if (count & 0x10) {
 60e:	84 ff       	sbrs	r24, 4
 610:	07 c0       	rjmp	.+14     	; 0x620 <SecsHoursLights+0x170>
		pinOut(B,1, OUT_LOW);
 612:	94 b1       	in	r25, 0x04	; 4
 614:	92 60       	ori	r25, 0x02	; 2
 616:	94 b9       	out	0x04, r25	; 4
 618:	95 b1       	in	r25, 0x05	; 5
 61a:	9d 7f       	andi	r25, 0xFD	; 253
 61c:	95 b9       	out	0x05, r25	; 5
 61e:	06 c0       	rjmp	.+12     	; 0x62c <SecsHoursLights+0x17c>
		} else {
		pinOut(B,1, OUT_HIGH);
 620:	94 b1       	in	r25, 0x04	; 4
 622:	92 60       	ori	r25, 0x02	; 2
 624:	94 b9       	out	0x04, r25	; 4
 626:	95 b1       	in	r25, 0x05	; 5
 628:	92 60       	ori	r25, 0x02	; 2
 62a:	95 b9       	out	0x05, r25	; 5
	}
	if (count & 0x20) {
 62c:	85 ff       	sbrs	r24, 5
 62e:	07 c0       	rjmp	.+14     	; 0x63e <SecsHoursLights+0x18e>
		pinOut(D,0, OUT_LOW);
 630:	9a b1       	in	r25, 0x0a	; 10
 632:	91 60       	ori	r25, 0x01	; 1
 634:	9a b9       	out	0x0a, r25	; 10
 636:	9b b1       	in	r25, 0x0b	; 11
 638:	9e 7f       	andi	r25, 0xFE	; 254
 63a:	9b b9       	out	0x0b, r25	; 11
 63c:	06 c0       	rjmp	.+12     	; 0x64a <SecsHoursLights+0x19a>
		} else {
		pinOut(D,0, OUT_HIGH);
 63e:	9a b1       	in	r25, 0x0a	; 10
 640:	91 60       	ori	r25, 0x01	; 1
 642:	9a b9       	out	0x0a, r25	; 10
 644:	9b b1       	in	r25, 0x0b	; 11
 646:	91 60       	ori	r25, 0x01	; 1
 648:	9b b9       	out	0x0b, r25	; 11
	}
	if (count & 0x40) {
 64a:	86 ff       	sbrs	r24, 6
 64c:	07 c0       	rjmp	.+14     	; 0x65c <SecsHoursLights+0x1ac>
		pinOut(D,1, OUT_LOW);
 64e:	8a b1       	in	r24, 0x0a	; 10
 650:	82 60       	ori	r24, 0x02	; 2
 652:	8a b9       	out	0x0a, r24	; 10
 654:	8b b1       	in	r24, 0x0b	; 11
 656:	8d 7f       	andi	r24, 0xFD	; 253
 658:	8b b9       	out	0x0b, r24	; 11
 65a:	08 95       	ret
		} else {
		pinOut(D,1, OUT_HIGH);
 65c:	8a b1       	in	r24, 0x0a	; 10
 65e:	82 60       	ori	r24, 0x02	; 2
 660:	8a b9       	out	0x0a, r24	; 10
 662:	8b b1       	in	r24, 0x0b	; 11
 664:	82 60       	ori	r24, 0x02	; 2
 666:	8b b9       	out	0x0b, r24	; 11
 668:	08 95       	ret

Disassembly of section .text.MinutesPMlights:

000002e2 <MinutesPMlights>:
	}
}

void MinutesPMlights( uint8_t minutes, uint8_t hours, bool isOdd) {
 2e2:	54 2f       	mov	r21, r20
	
	static const uint8_t fiveMinutesMask [12] = {0x01,0x03,0x07,0x0F,0x1F,0x3F, 0x40,0x60,0x70,0x78,0x7C,0x7E};
	uint8_t fiveMinutes = minutes/5;
 2e4:	9d ec       	ldi	r25, 0xCD	; 205
 2e6:	89 9f       	mul	r24, r25
 2e8:	91 2d       	mov	r25, r1
 2ea:	11 24       	eor	r1, r1
 2ec:	96 95       	lsr	r25
 2ee:	96 95       	lsr	r25
	
	
	uint8_t count = 	fiveMinutesMask[fiveMinutes];
 2f0:	29 2f       	mov	r18, r25
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	40 e0       	ldi	r20, 0x00	; 0
 2f6:	22 53       	subi	r18, 0x32	; 50
 2f8:	3f 4f       	sbci	r19, 0xFF	; 255
 2fa:	4f 4f       	sbci	r20, 0xFF	; 255
 2fc:	f9 01       	movw	r30, r18
 2fe:	34 91       	lpm	r19, Z
 300:	47 fd       	sbrc	r20, 7
 302:	30 81       	ld	r19, Z
	uint8_t lessFiveMinutes = minutes%5;
 304:	29 2f       	mov	r18, r25
 306:	22 0f       	add	r18, r18
 308:	22 0f       	add	r18, r18
 30a:	92 0f       	add	r25, r18
 30c:	28 2f       	mov	r18, r24
 30e:	29 1b       	sub	r18, r25
	static const uint8_t minutesMaskBefore30 [5] = {0x00,0x01,0x03,0x07,0x0F};
	static const uint8_t minutesMaskAfter30 [5] = {0x00,0x08,0x0C,0x0E,0x0F};

	uint8_t minutesCode = 0;
	if (minutes < 30) {
 310:	8e 31       	cpi	r24, 0x1E	; 30
 312:	58 f4       	brcc	.+22     	; 0x32a <MinutesPMlights+0x48>
		minutesCode = minutesMaskBefore30[lessFiveMinutes];
 314:	82 2f       	mov	r24, r18
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	a0 e0       	ldi	r26, 0x00	; 0
 31a:	85 51       	subi	r24, 0x15	; 21
 31c:	9f 4f       	sbci	r25, 0xFF	; 255
 31e:	af 4f       	sbci	r26, 0xFF	; 255
 320:	fc 01       	movw	r30, r24
 322:	84 91       	lpm	r24, Z
 324:	a7 fd       	sbrc	r26, 7
 326:	80 81       	ld	r24, Z
 328:	0a c0       	rjmp	.+20     	; 0x33e <MinutesPMlights+0x5c>
	} else {
	  minutesCode = minutesMaskAfter30[lessFiveMinutes];
 32a:	82 2f       	mov	r24, r18
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	a0 e0       	ldi	r26, 0x00	; 0
 330:	8a 51       	subi	r24, 0x1A	; 26
 332:	9f 4f       	sbci	r25, 0xFF	; 255
 334:	af 4f       	sbci	r26, 0xFF	; 255
 336:	fc 01       	movw	r30, r24
 338:	84 91       	lpm	r24, Z
 33a:	a7 fd       	sbrc	r26, 7
 33c:	80 81       	ld	r24, Z
	}

	if (isOdd) { // Odd
 33e:	55 23       	and	r21, r21
 340:	09 f4       	brne	.+2      	; 0x344 <MinutesPMlights+0x62>
 342:	5b c0       	rjmp	.+182    	; 0x3fa <MinutesPMlights+0x118>
		// 5 minutes LEDs
		if (count & 0x01) { // 0 minute
 344:	30 ff       	sbrs	r19, 0
 346:	07 c0       	rjmp	.+14     	; 0x356 <MinutesPMlights+0x74>
			pinOut(C,5, OUT_LOW);
 348:	97 b1       	in	r25, 0x07	; 7
 34a:	90 62       	ori	r25, 0x20	; 32
 34c:	97 b9       	out	0x07, r25	; 7
 34e:	98 b1       	in	r25, 0x08	; 8
 350:	9f 7d       	andi	r25, 0xDF	; 223
 352:	98 b9       	out	0x08, r25	; 8
 354:	06 c0       	rjmp	.+12     	; 0x362 <MinutesPMlights+0x80>
		} else {
			pinInNoPullup(C, 5);
 356:	97 b1       	in	r25, 0x07	; 7
 358:	9f 7d       	andi	r25, 0xDF	; 223
 35a:	97 b9       	out	0x07, r25	; 7
 35c:	98 b1       	in	r25, 0x08	; 8
 35e:	9f 7d       	andi	r25, 0xDF	; 223
 360:	98 b9       	out	0x08, r25	; 8
		}
		if (count & 0x04) { // 10th minute
 362:	32 ff       	sbrs	r19, 2
 364:	07 c0       	rjmp	.+14     	; 0x374 <MinutesPMlights+0x92>
			pinOut(C,4, OUT_LOW);
 366:	97 b1       	in	r25, 0x07	; 7
 368:	90 61       	ori	r25, 0x10	; 16
 36a:	97 b9       	out	0x07, r25	; 7
 36c:	98 b1       	in	r25, 0x08	; 8
 36e:	9f 7e       	andi	r25, 0xEF	; 239
 370:	98 b9       	out	0x08, r25	; 8
 372:	06 c0       	rjmp	.+12     	; 0x380 <MinutesPMlights+0x9e>
		} else {
			pinInNoPullup(C,4 );
 374:	97 b1       	in	r25, 0x07	; 7
 376:	9f 7e       	andi	r25, 0xEF	; 239
 378:	97 b9       	out	0x07, r25	; 7
 37a:	98 b1       	in	r25, 0x08	; 8
 37c:	9f 7e       	andi	r25, 0xEF	; 239
 37e:	98 b9       	out	0x08, r25	; 8
		}
		if (count & 0x10) { // 20th minute
 380:	34 ff       	sbrs	r19, 4
 382:	07 c0       	rjmp	.+14     	; 0x392 <MinutesPMlights+0xb0>
			pinOut(C,3, OUT_LOW);
 384:	97 b1       	in	r25, 0x07	; 7
 386:	98 60       	ori	r25, 0x08	; 8
 388:	97 b9       	out	0x07, r25	; 7
 38a:	98 b1       	in	r25, 0x08	; 8
 38c:	97 7f       	andi	r25, 0xF7	; 247
 38e:	98 b9       	out	0x08, r25	; 8
 390:	06 c0       	rjmp	.+12     	; 0x39e <MinutesPMlights+0xbc>
			} else {
			pinInNoPullup(C,3 );
 392:	97 b1       	in	r25, 0x07	; 7
 394:	97 7f       	andi	r25, 0xF7	; 247
 396:	97 b9       	out	0x07, r25	; 7
 398:	98 b1       	in	r25, 0x08	; 8
 39a:	97 7f       	andi	r25, 0xF7	; 247
 39c:	98 b9       	out	0x08, r25	; 8
		}
		if (count & 0x40) { // 30th minute
 39e:	36 ff       	sbrs	r19, 6
 3a0:	07 c0       	rjmp	.+14     	; 0x3b0 <MinutesPMlights+0xce>
			pinOut(C,2, OUT_LOW);
 3a2:	97 b1       	in	r25, 0x07	; 7
 3a4:	94 60       	ori	r25, 0x04	; 4
 3a6:	97 b9       	out	0x07, r25	; 7
 3a8:	98 b1       	in	r25, 0x08	; 8
 3aa:	9b 7f       	andi	r25, 0xFB	; 251
 3ac:	98 b9       	out	0x08, r25	; 8
 3ae:	06 c0       	rjmp	.+12     	; 0x3bc <MinutesPMlights+0xda>
			} else {
			pinInNoPullup(C,2 );
 3b0:	97 b1       	in	r25, 0x07	; 7
 3b2:	9b 7f       	andi	r25, 0xFB	; 251
 3b4:	97 b9       	out	0x07, r25	; 7
 3b6:	98 b1       	in	r25, 0x08	; 8
 3b8:	9b 7f       	andi	r25, 0xFB	; 251
 3ba:	98 b9       	out	0x08, r25	; 8
		}
		// minutes LEDs
		if (minutesCode & 0x01) { // 1th minute
 3bc:	80 ff       	sbrs	r24, 0
 3be:	07 c0       	rjmp	.+14     	; 0x3ce <MinutesPMlights+0xec>
			pinOut(C,1,OUT_LOW);
 3c0:	97 b1       	in	r25, 0x07	; 7
 3c2:	92 60       	ori	r25, 0x02	; 2
 3c4:	97 b9       	out	0x07, r25	; 7
 3c6:	98 b1       	in	r25, 0x08	; 8
 3c8:	9d 7f       	andi	r25, 0xFD	; 253
 3ca:	98 b9       	out	0x08, r25	; 8
 3cc:	06 c0       	rjmp	.+12     	; 0x3da <MinutesPMlights+0xf8>
		} else {
			pinInNoPullup(C,1);
 3ce:	97 b1       	in	r25, 0x07	; 7
 3d0:	9d 7f       	andi	r25, 0xFD	; 253
 3d2:	97 b9       	out	0x07, r25	; 7
 3d4:	98 b1       	in	r25, 0x08	; 8
 3d6:	9d 7f       	andi	r25, 0xFD	; 253
 3d8:	98 b9       	out	0x08, r25	; 8
		}
		if (minutesCode & 0x04) { // 3d minute
 3da:	82 ff       	sbrs	r24, 2
 3dc:	07 c0       	rjmp	.+14     	; 0x3ec <MinutesPMlights+0x10a>
			pinOut(C,0,OUT_LOW);
 3de:	87 b1       	in	r24, 0x07	; 7
 3e0:	81 60       	ori	r24, 0x01	; 1
 3e2:	87 b9       	out	0x07, r24	; 7
 3e4:	88 b1       	in	r24, 0x08	; 8
 3e6:	8e 7f       	andi	r24, 0xFE	; 254
 3e8:	88 b9       	out	0x08, r24	; 8
 3ea:	08 95       	ret
		} else {
			pinInNoPullup(C,0);
 3ec:	87 b1       	in	r24, 0x07	; 7
 3ee:	8e 7f       	andi	r24, 0xFE	; 254
 3f0:	87 b9       	out	0x07, r24	; 7
 3f2:	88 b1       	in	r24, 0x08	; 8
 3f4:	8e 7f       	andi	r24, 0xFE	; 254
 3f6:	88 b9       	out	0x08, r24	; 8
 3f8:	08 95       	ret
		}
	} else { // Even
		// 5 minutes LEDs
		if (count & 0x02) { // 5 minutes
 3fa:	31 ff       	sbrs	r19, 1
 3fc:	07 c0       	rjmp	.+14     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			pinOut(C,5, OUT_HIGH);
 3fe:	97 b1       	in	r25, 0x07	; 7
 400:	90 62       	ori	r25, 0x20	; 32
 402:	97 b9       	out	0x07, r25	; 7
 404:	98 b1       	in	r25, 0x08	; 8
 406:	90 62       	ori	r25, 0x20	; 32
 408:	98 b9       	out	0x08, r25	; 8
 40a:	06 c0       	rjmp	.+12     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		} else {
			pinInNoPullup(C, 5);
 40c:	97 b1       	in	r25, 0x07	; 7
 40e:	9f 7d       	andi	r25, 0xDF	; 223
 410:	97 b9       	out	0x07, r25	; 7
 412:	98 b1       	in	r25, 0x08	; 8
 414:	9f 7d       	andi	r25, 0xDF	; 223
 416:	98 b9       	out	0x08, r25	; 8
		}
		if (count & 0x08) { // 15 minutes
 418:	33 ff       	sbrs	r19, 3
 41a:	07 c0       	rjmp	.+14     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
			pinOut(C,4, OUT_HIGH);
 41c:	97 b1       	in	r25, 0x07	; 7
 41e:	90 61       	ori	r25, 0x10	; 16
 420:	97 b9       	out	0x07, r25	; 7
 422:	98 b1       	in	r25, 0x08	; 8
 424:	90 61       	ori	r25, 0x10	; 16
 426:	98 b9       	out	0x08, r25	; 8
 428:	06 c0       	rjmp	.+12     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		} else {
			pinInNoPullup(C,4 );
 42a:	97 b1       	in	r25, 0x07	; 7
 42c:	9f 7e       	andi	r25, 0xEF	; 239
 42e:	97 b9       	out	0x07, r25	; 7
 430:	98 b1       	in	r25, 0x08	; 8
 432:	9f 7e       	andi	r25, 0xEF	; 239
 434:	98 b9       	out	0x08, r25	; 8
		}
		if (count & 0x20) { // 25 minutes
 436:	35 ff       	sbrs	r19, 5
 438:	07 c0       	rjmp	.+14     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
			pinOut(C,3, OUT_HIGH);
 43a:	97 b1       	in	r25, 0x07	; 7
 43c:	98 60       	ori	r25, 0x08	; 8
 43e:	97 b9       	out	0x07, r25	; 7
 440:	98 b1       	in	r25, 0x08	; 8
 442:	98 60       	ori	r25, 0x08	; 8
 444:	98 b9       	out	0x08, r25	; 8
 446:	06 c0       	rjmp	.+12     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
		} else {
			pinInNoPullup(C,3 );
 448:	97 b1       	in	r25, 0x07	; 7
 44a:	97 7f       	andi	r25, 0xF7	; 247
 44c:	97 b9       	out	0x07, r25	; 7
 44e:	98 b1       	in	r25, 0x08	; 8
 450:	97 7f       	andi	r25, 0xF7	; 247
 452:	98 b9       	out	0x08, r25	; 8
		}
		if (hours > 11 ) { // PM
 454:	6c 30       	cpi	r22, 0x0C	; 12
 456:	38 f0       	brcs	.+14     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
			pinOut(C,2, OUT_HIGH);
 458:	97 b1       	in	r25, 0x07	; 7
 45a:	94 60       	ori	r25, 0x04	; 4
 45c:	97 b9       	out	0x07, r25	; 7
 45e:	98 b1       	in	r25, 0x08	; 8
 460:	94 60       	ori	r25, 0x04	; 4
 462:	98 b9       	out	0x08, r25	; 8
 464:	06 c0       	rjmp	.+12     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
		} else {
			pinInNoPullup(C,2 );
 466:	97 b1       	in	r25, 0x07	; 7
 468:	9b 7f       	andi	r25, 0xFB	; 251
 46a:	97 b9       	out	0x07, r25	; 7
 46c:	98 b1       	in	r25, 0x08	; 8
 46e:	9b 7f       	andi	r25, 0xFB	; 251
 470:	98 b9       	out	0x08, r25	; 8
		}
		// minutes LEDs
		if (minutesCode & 0x02) { // 2d minute
 472:	81 ff       	sbrs	r24, 1
 474:	07 c0       	rjmp	.+14     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
			pinOut(C,1,OUT_HIGH);
 476:	97 b1       	in	r25, 0x07	; 7
 478:	92 60       	ori	r25, 0x02	; 2
 47a:	97 b9       	out	0x07, r25	; 7
 47c:	98 b1       	in	r25, 0x08	; 8
 47e:	92 60       	ori	r25, 0x02	; 2
 480:	98 b9       	out	0x08, r25	; 8
 482:	06 c0       	rjmp	.+12     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
		} else {
			pinInNoPullup(C,1);
 484:	97 b1       	in	r25, 0x07	; 7
 486:	9d 7f       	andi	r25, 0xFD	; 253
 488:	97 b9       	out	0x07, r25	; 7
 48a:	98 b1       	in	r25, 0x08	; 8
 48c:	9d 7f       	andi	r25, 0xFD	; 253
 48e:	98 b9       	out	0x08, r25	; 8
		}
		if (minutesCode & 0x08) { // 4th minute
 490:	83 ff       	sbrs	r24, 3
 492:	07 c0       	rjmp	.+14     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			pinOut(C,0,OUT_HIGH);
 494:	87 b1       	in	r24, 0x07	; 7
 496:	81 60       	ori	r24, 0x01	; 1
 498:	87 b9       	out	0x07, r24	; 7
 49a:	88 b1       	in	r24, 0x08	; 8
 49c:	81 60       	ori	r24, 0x01	; 1
 49e:	88 b9       	out	0x08, r24	; 8
 4a0:	08 95       	ret
		} else {
			pinInNoPullup(C,0);
 4a2:	87 b1       	in	r24, 0x07	; 7
 4a4:	8e 7f       	andi	r24, 0xFE	; 254
 4a6:	87 b9       	out	0x07, r24	; 7
 4a8:	88 b1       	in	r24, 0x08	; 8
 4aa:	8e 7f       	andi	r24, 0xFE	; 254
 4ac:	88 b9       	out	0x08, r24	; 8
 4ae:	08 95       	ret

Disassembly of section .text.__vector_9:

000000f0 <__vector_9>:
		}
	}
}

ISR(TIMER2_OVF_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	4f 93       	push	r20
 100:	5f 93       	push	r21
 102:	6f 93       	push	r22
 104:	7f 93       	push	r23
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
	static bool minutesButton = false;
	static bool modeButton = false;
	static bool powerUp = true;
	static Mode clockMode = Mode_NORMAL;
	
	bool push = (pinIn(D,5) == 0);
 112:	8a b1       	in	r24, 0x0a	; 10
 114:	8f 7d       	andi	r24, 0xDF	; 223
 116:	8a b9       	out	0x0a, r24	; 10
 118:	8b b1       	in	r24, 0x0b	; 11
 11a:	80 62       	ori	r24, 0x20	; 32
 11c:	8b b9       	out	0x0b, r24	; 11
 11e:	89 b1       	in	r24, 0x09	; 9
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	28 2f       	mov	r18, r24
 124:	20 72       	andi	r18, 0x20	; 32
 126:	85 fd       	sbrc	r24, 5
 128:	90 e0       	ldi	r25, 0x00	; 0
 	if (!push) {
 12a:	22 23       	and	r18, r18
 12c:	21 f0       	breq	.+8      	; 0x136 <__vector_9+0x46>
		clockMode = Mode_POWEROFF;
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <clockMode.1798>
 134:	06 c0       	rjmp	.+12     	; 0x142 <__vector_9+0x52>
	} else if (!powerUp) { // power is up just now
 136:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <powerUp.1797>
 13a:	81 11       	cpse	r24, r1
 13c:	02 c0       	rjmp	.+4      	; 0x142 <__vector_9+0x52>
		clockMode = Mode_NORMAL;
 13e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <clockMode.1798>
	}
	powerUp = push;
 142:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <powerUp.1797>
	
    push = (pinIn(B,0) == 0);
 146:	84 b1       	in	r24, 0x04	; 4
 148:	8e 7f       	andi	r24, 0xFE	; 254
 14a:	84 b9       	out	0x04, r24	; 4
 14c:	85 b1       	in	r24, 0x05	; 5
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	85 b9       	out	0x05, r24	; 5
 152:	93 b1       	in	r25, 0x03	; 3
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	29 2f       	mov	r18, r25
 158:	21 70       	andi	r18, 0x01	; 1
 15a:	90 fd       	sbrc	r25, 0
 15c:	80 e0       	ldi	r24, 0x00	; 0
    if (push) {
 15e:	21 11       	cpse	r18, r1
 160:	24 c0       	rjmp	.+72     	; 0x1aa <__vector_9+0xba>
	    if (push != modeButton) { // mode button down just now
 162:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <modeButton.1796>
 166:	89 17       	cp	r24, r25
 168:	01 f1       	breq	.+64     	; 0x1aa <__vector_9+0xba>
			if (minutesButton) {
 16a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <minutesButton.1795>
 16e:	99 23       	and	r25, r25
 170:	69 f0       	breq	.+26     	; 0x18c <__vector_9+0x9c>
				if (clockMode == Mode_NORMAL) {
 172:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <clockMode.1798>
 176:	91 11       	cpse	r25, r1
 178:	04 c0       	rjmp	.+8      	; 0x182 <__vector_9+0x92>
					clockMode = Mode_DARK;
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <clockMode.1798>
 180:	14 c0       	rjmp	.+40     	; 0x1aa <__vector_9+0xba>
				} else if (clockMode == Mode_DARK) {
 182:	91 30       	cpi	r25, 0x01	; 1
 184:	91 f4       	brne	.+36     	; 0x1aa <__vector_9+0xba>
					clockMode = Mode_NORMAL;
 186:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <clockMode.1798>
 18a:	0f c0       	rjmp	.+30     	; 0x1aa <__vector_9+0xba>
				}	
			} else {
				if (clockMode == Mode_NORMAL) {
 18c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <clockMode.1798>
 190:	91 11       	cpse	r25, r1
 192:	06 c0       	rjmp	.+12     	; 0x1a0 <__vector_9+0xb0>
					clockMode = Mode_SETTIME;
 194:	92 e0       	ldi	r25, 0x02	; 2
 196:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <clockMode.1798>
					secs = 0;
 19a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <secs.1792>
 19e:	05 c0       	rjmp	.+10     	; 0x1aa <__vector_9+0xba>
				} else if ( (clockMode == Mode_SETTIME)  || (clockMode == Mode_DARK) ) {
 1a0:	91 50       	subi	r25, 0x01	; 1
 1a2:	92 30       	cpi	r25, 0x02	; 2
 1a4:	10 f4       	brcc	.+4      	; 0x1aa <__vector_9+0xba>
					clockMode = Mode_NORMAL;
 1a6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <clockMode.1798>
				}
			}
		} else { // mode button up nothing to do so far
		}
	}
    modeButton = push;
 1aa:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <modeButton.1796>

	
	clockTick++;
 1ae:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <clockTick.1793>
 1b2:	8f 5f       	subi	r24, 0xFF	; 255
 1b4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <clockTick.1793>
	if ( (clockMode != Mode_SETTIME) && ((clockTick & 0x7F) == 0) ) { // Run Clock
 1b8:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <clockMode.1798>
 1bc:	92 30       	cpi	r25, 0x02	; 2
 1be:	e9 f0       	breq	.+58     	; 0x1fa <__vector_9+0x10a>
 1c0:	8f 77       	andi	r24, 0x7F	; 127
 1c2:	d9 f4       	brne	.+54     	; 0x1fa <__vector_9+0x10a>
		secs++;
 1c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <secs.1792>
 1c8:	8f 5f       	subi	r24, 0xFF	; 255
 1ca:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <secs.1792>
		if (secs > 59) {
 1ce:	8c 33       	cpi	r24, 0x3C	; 60
 1d0:	a0 f0       	brcs	.+40     	; 0x1fa <__vector_9+0x10a>
			secs = 0;
 1d2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <secs.1792>
			minutes++;
 1d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <minutes.1791>
 1da:	8f 5f       	subi	r24, 0xFF	; 255
 1dc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <minutes.1791>
			if (minutes > 59) {
 1e0:	8c 33       	cpi	r24, 0x3C	; 60
 1e2:	58 f0       	brcs	.+22     	; 0x1fa <__vector_9+0x10a>
				minutes = 0;
 1e4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <minutes.1791>
				hours++;
 1e8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hours.1790>
 1ec:	8f 5f       	subi	r24, 0xFF	; 255
 1ee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <hours.1790>
				if (hours > 23) {
 1f2:	88 31       	cpi	r24, 0x18	; 24
 1f4:	10 f0       	brcs	.+4      	; 0x1fa <__vector_9+0x10a>
					hours = 0;
 1f6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <hours.1790>
				}
			}
		}
	}
	
	push = (pinIn(D,6) == 0);
 1fa:	8a b1       	in	r24, 0x0a	; 10
 1fc:	8f 7b       	andi	r24, 0xBF	; 191
 1fe:	8a b9       	out	0x0a, r24	; 10
 200:	8b b1       	in	r24, 0x0b	; 11
 202:	80 64       	ori	r24, 0x40	; 64
 204:	8b b9       	out	0x0b, r24	; 11
 206:	99 b1       	in	r25, 0x09	; 9
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	29 2f       	mov	r18, r25
 20c:	20 74       	andi	r18, 0x40	; 64
 20e:	96 fd       	sbrc	r25, 6
 210:	80 e0       	ldi	r24, 0x00	; 0
	
	if (push && (push != hoursButton) && (clockMode == Mode_SETTIME) ) {
 212:	21 11       	cpse	r18, r1
 214:	1a c0       	rjmp	.+52     	; 0x24a <__vector_9+0x15a>
 216:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 21a:	89 17       	cp	r24, r25
 21c:	b1 f0       	breq	.+44     	; 0x24a <__vector_9+0x15a>
 21e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <clockMode.1798>
 222:	92 30       	cpi	r25, 0x02	; 2
 224:	91 f4       	brne	.+36     	; 0x24a <__vector_9+0x15a>
		if (minutesButton) { // hours button pressed simultaneously with minutes button. Reset the time.
 226:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <minutesButton.1795>
 22a:	99 23       	and	r25, r25
 22c:	29 f0       	breq	.+10     	; 0x238 <__vector_9+0x148>
			hours = 0;
 22e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <hours.1790>
			minutes = 0;
 232:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <minutes.1791>
 236:	09 c0       	rjmp	.+18     	; 0x24a <__vector_9+0x15a>
		} else {
			hours++;
 238:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <hours.1790>
 23c:	9f 5f       	subi	r25, 0xFF	; 255
 23e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <hours.1790>
			if (hours > 23) {
 242:	98 31       	cpi	r25, 0x18	; 24
 244:	10 f0       	brcs	.+4      	; 0x24a <__vector_9+0x15a>
				hours = 0;
 246:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <hours.1790>
			}
		}
	}
	hoursButton = push;
 24a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	push = (pinIn(D,7) == 0);
 24e:	8a b1       	in	r24, 0x0a	; 10
 250:	8f 77       	andi	r24, 0x7F	; 127
 252:	8a b9       	out	0x0a, r24	; 10
 254:	8b b1       	in	r24, 0x0b	; 11
 256:	80 68       	ori	r24, 0x80	; 128
 258:	8b b9       	out	0x0b, r24	; 11
 25a:	99 b1       	in	r25, 0x09	; 9
 25c:	89 2f       	mov	r24, r25
 25e:	80 95       	com	r24
 260:	88 1f       	adc	r24, r24
 262:	88 27       	eor	r24, r24
 264:	88 1f       	adc	r24, r24
	if (push && (push != minutesButton) && (clockMode == Mode_SETTIME) ) {
 266:	99 23       	and	r25, r25
 268:	8c f0       	brlt	.+34     	; 0x28c <__vector_9+0x19c>
 26a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <minutesButton.1795>
 26e:	89 17       	cp	r24, r25
 270:	69 f0       	breq	.+26     	; 0x28c <__vector_9+0x19c>
 272:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <clockMode.1798>
 276:	92 30       	cpi	r25, 0x02	; 2
 278:	49 f4       	brne	.+18     	; 0x28c <__vector_9+0x19c>
		minutes++;
 27a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <minutes.1791>
 27e:	9f 5f       	subi	r25, 0xFF	; 255
 280:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <minutes.1791>
		if (minutes > 59) {
 284:	9c 33       	cpi	r25, 0x3C	; 60
 286:	10 f0       	brcs	.+4      	; 0x28c <__vector_9+0x19c>
			minutes = 0;
 288:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <minutes.1791>
		}
	}
	minutesButton = push;
 28c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <minutesButton.1795>
	if ((clockMode == Mode_DARK) || (clockMode == Mode_POWEROFF) ) {
 290:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <clockMode.1798>
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	11 f0       	breq	.+4      	; 0x29c <__vector_9+0x1ac>
 298:	83 30       	cpi	r24, 0x03	; 3
 29a:	19 f4       	brne	.+6      	; 0x2a2 <__vector_9+0x1b2>
		AllDark();
 29c:	0e 94 35 03 	call	0x66a	; 0x66a <AllDark>
 2a0:	0f c0       	rjmp	.+30     	; 0x2c0 <__vector_9+0x1d0>
	} else {
		SecsHoursLights(secs,hours);
 2a2:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <hours.1790>
 2a6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <secs.1792>
 2aa:	0e 94 58 02 	call	0x4b0	; 0x4b0 <SecsHoursLights>
		bool isOdd = (clockTick & 0x01) != 0;
 2ae:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <clockTick.1793>
 2b2:	41 70       	andi	r20, 0x01	; 1
		MinutesPMlights(minutes, hours, isOdd );
 2b4:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <hours.1790>
 2b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <minutes.1791>
 2bc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <MinutesPMlights>
	}
}
 2c0:	ff 91       	pop	r31
 2c2:	ef 91       	pop	r30
 2c4:	bf 91       	pop	r27
 2c6:	af 91       	pop	r26
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	7f 91       	pop	r23
 2ce:	6f 91       	pop	r22
 2d0:	5f 91       	pop	r21
 2d2:	4f 91       	pop	r20
 2d4:	3f 91       	pop	r19
 2d6:	2f 91       	pop	r18
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

Disassembly of section .text.main:

0000075c <main>:

int main(void)
{
	activateTimer2();
 75c:	0e 94 96 03 	call	0x72c	; 0x72c <activateTimer2>
 760:	ff cf       	rjmp	.-2      	; 0x760 <main+0x4>

Disassembly of section .text.__dummy_fini:

0000076a <_fini>:
 76a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000076c <__funcs_on_exit>:
 76c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000076e <__simulator_exit>:
 76e:	08 95       	ret

Disassembly of section .text.exit:

00000746 <exit>:
 746:	ec 01       	movw	r28, r24
 748:	0e 94 b6 03 	call	0x76c	; 0x76c <__funcs_on_exit>
 74c:	0e 94 b5 03 	call	0x76a	; 0x76a <_fini>
 750:	ce 01       	movw	r24, r28
 752:	0e 94 b7 03 	call	0x76e	; 0x76e <__simulator_exit>
 756:	ce 01       	movw	r24, r28
 758:	0e 94 b3 03 	call	0x766	; 0x766 <_Exit>

Disassembly of section .text._Exit:

00000766 <_Exit>:
 766:	0e 94 65 00 	call	0xca	; 0xca <_exit>
